#include <malloc.h>
#include <string.h>
#include <math.h>
#include <pthread.h>
#ifdef _WIN32
#include <stdio.h>
#else
#include <android/log.h>
#endif

#include "Image.h"

extern LONG			**gLinesPtr[];
extern LONG			**gSclLinesPtr[];
extern int			gCancel[];

extern int			gMaxThreadNum;

int	Coloring;

// http://www1.axfc.net/uploader/File/so/File_56252.zip
// 疑似四色刷りトーンカーブファイル(疑似四色刷り.amp)を拝借
const unsigned char red_data[] = {
	0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10, 0x12, 0x13,
	0x14, 0x15, 0x16, 0x17, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2B, 0x2C, 0x2D, 0x2E, 0x2E, 0x2F, 0x30, 0x30, 0x31,
	0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 0x32, 0x31,
	0x31, 0x30, 0x2F, 0x2E, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x2A, 0x29, 0x28, 0x27, 0x27, 0x26, 0x25,
	0x25, 0x24, 0x24, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23,
	0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2C, 0x2E, 0x2F, 0x31, 0x33, 0x36, 0x38, 0x3A,
	0x3C, 0x3F, 0x42, 0x44, 0x47, 0x4A, 0x4C, 0x4F, 0x52, 0x55, 0x58, 0x5B, 0x5E, 0x61, 0x64, 0x67,
	0x6A, 0x6D, 0x70, 0x74, 0x77, 0x79, 0x7C, 0x7F, 0x82, 0x85, 0x88, 0x8A, 0x8D, 0x90, 0x92, 0x94,
	0x97, 0x99, 0x9B, 0x9D, 0x9F, 0xA1, 0xA2, 0xA4, 0xA6, 0xA7, 0xA8, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE,
	0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBC,
	0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
	0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDB, 0xDC,
	0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED,
	0xEE, 0xEF, 0xF0, 0xF1, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFC, 0xFD, 0xFE, 0xFF
};

const unsigned char green_data[] = {
	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15, 0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x29, 0x2C,
	0x2F, 0x31, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x42, 0x44, 0x45, 0x47, 0x48, 0x49, 0x4A,
	0x4B, 0x4C, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4C, 0x4C, 0x4B, 0x4A, 0x49,
	0x48, 0x47, 0x46, 0x45, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,
	0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,
	0x3E, 0x40, 0x41, 0x43, 0x44, 0x46, 0x48, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x52, 0x54, 0x56, 0x58,
	0x5A, 0x5B, 0x5D, 0x5F, 0x60, 0x62, 0x63, 0x65, 0x66, 0x67, 0x68, 0x6A, 0x6B, 0x6B, 0x6C, 0x6D,
	0x6E, 0x6F, 0x6F, 0x70, 0x70, 0x71, 0x71, 0x72, 0x72, 0x73, 0x73, 0x73, 0x73, 0x74, 0x74, 0x74,
	0x74, 0x75, 0x75, 0x75, 0x75, 0x76, 0x76, 0x76, 0x76, 0x77, 0x77, 0x77, 0x77, 0x78, 0x78, 0x78,
	0x78, 0x78, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x78, 0x77, 0x77, 0x76, 0x76, 0x75, 0x74, 0x73,
	0x73, 0x72, 0x71, 0x70, 0x6F, 0x6E, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x6A, 0x69, 0x68, 0x68, 0x67,
	0x67, 0x67, 0x66, 0x66, 0x66, 0x66, 0x67, 0x67, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E,
	0x70, 0x71, 0x73, 0x75, 0x77, 0x79, 0x7A, 0x7C, 0x7F, 0x81, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8E,
	0x90, 0x92, 0x94, 0x96, 0x99, 0x9B, 0x9D, 0x9F, 0xA2, 0xA4, 0xA6, 0xA9, 0xAB, 0xAD, 0xB0, 0xB2,
	0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC5, 0xC7, 0xCA, 0xCC, 0xCE, 0xD1, 0xD3, 0xD6, 0xD8,
	0xDA, 0xDD, 0xDF, 0xE2, 0xE4, 0xE7, 0xE9, 0xEB, 0xEE, 0xF0, 0xF3, 0xF5, 0xF8, 0xFA, 0xFD, 0xFF
};

const unsigned char blue_data[] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x09, 0x0B, 0x0D, 0x0F, 0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D,
	0x1F, 0x21, 0x23, 0x25, 0x27, 0x29, 0x2B, 0x2D, 0x30, 0x32, 0x34, 0x36, 0x39, 0x3B, 0x3D, 0x40,
	0x42, 0x45, 0x47, 0x4A, 0x4C, 0x4F, 0x52, 0x54, 0x57, 0x5A, 0x5D, 0x5F, 0x62, 0x65, 0x68, 0x6B,
	0x6E, 0x71, 0x73, 0x76, 0x78, 0x7B, 0x7D, 0x80, 0x82, 0x84, 0x86, 0x87, 0x89, 0x8A, 0x8C, 0x8D,
	0x8D, 0x8E, 0x8E, 0x8F, 0x8E, 0x8E, 0x8E, 0x8D, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x86, 0x85,
	0x84, 0x83, 0x81, 0x80, 0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x79, 0x78, 0x78, 0x78, 0x78,
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78,
	0x78, 0x77, 0x77, 0x76, 0x76, 0x75, 0x74, 0x74, 0x73, 0x73, 0x72, 0x72, 0x72, 0x72, 0x71, 0x71,
	0x71, 0x71, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x71, 0x71, 0x70,
	0x70, 0x6F, 0x6E, 0x6D, 0x6C, 0x6A, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60, 0x5E, 0x5C, 0x59, 0x57,
	0x55, 0x53, 0x50, 0x4E, 0x4B, 0x49, 0x46, 0x44, 0x42, 0x3F, 0x3D, 0x3B, 0x38, 0x36, 0x34, 0x32,
	0x30, 0x2E, 0x2C, 0x2A, 0x29, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21,
	0x21, 0x21, 0x22, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x2B, 0x2D, 0x2F, 0x31, 0x33, 0x35,
	0x38, 0x3A, 0x3D, 0x3F, 0x42, 0x45, 0x48, 0x4B, 0x4F, 0x52, 0x55, 0x59, 0x5D, 0x60, 0x64, 0x68,
	0x6C, 0x70, 0x74, 0x78, 0x7C, 0x80, 0x85, 0x89, 0x8E, 0x92, 0x97, 0x9B, 0xA0, 0xA5, 0xAA, 0xAE,
	0xB3, 0xB8, 0xBD, 0xC2, 0xC7, 0xCC, 0xD1, 0xD6, 0xDB, 0xE0, 0xE5, 0xEA, 0xF0, 0xF5, 0xFA, 0xFF
};

void *ImageGray_ThreadFunc(void *param)
{
	int *range = (int*)param;
	int stindex   = range[0];
	int edindex   = range[1];
	int OrgWidth  = range[2];
	int OrgHeight = range[3];
    int index = range[4];

    LONG *buffptr = nullptr;

    // 使用するバッファを保持
    LONG *orgbuff;

	int		xx;	// x座標
	int		yy;	// y座標

    char	rs[256];
    char	gs[256];
    char	bs[256];

	for (int i = 0 ; i < 256 ; i ++) {
		rs[i] = (int)(0.299f * i + 0.5f);
//		LOGD("ImageGray : rs[%d]", rs[i]);
	}
	for (int i = 0 ; i < 256 ; i ++) {
		gs[i] = (int)(0.587f * i + 0.5f);
//		LOGD("ImageGray : gs[%d]", gs[i]);
	}
	for (int i = 0 ; i < 256 ; i ++) {
		bs[i] = (int)(0.114f * i + 0.5f);
//		LOGD("ImageGray : bs[%d]", bs[i]);
	}

	int cc, rr, gg, bb;

	// ライン数
	for (yy = stindex ; yy < edindex ; yy ++) {
//		LOGD("ImageGray : loop yy=%d", yy);
		if (gCancel[index]) {
			LOGD("ImageGray : cancel.");
//			ReleaseBuff(Page, 1, Half);
			return (void*)ERROR_CODE_USER_CANCELED;
		}

        // バッファ位置
        buffptr = gSclLinesPtr[index][yy];

        orgbuff = gLinesPtr[index][yy + HOKAN_DOTS / 2];

		for (xx =  0 ; xx < OrgWidth + HOKAN_DOTS ; xx++) {
			// 反転
			rr = RGB888_RED(orgbuff[xx]);
			gg = RGB888_GREEN(orgbuff[xx]);
			bb = RGB888_BLUE(orgbuff[xx]);
			cc = rs[rr] + gs[gg] + bs[bb];
            if	(cc > 255)	cc = 255;
            if	(Coloring)	{
				// 自動着色の場合は疑似四色刷りトーンカーブファイルを使う
				rr = red_data[cc];
				gg = green_data[cc];
				bb = blue_data[cc];
			} else {
				rr = gg = bb = cc;
			}

            buffptr[xx - HOKAN_DOTS / 2] = MAKE8888(rr, gg, bb);
		}

		// 補完用の余裕
        buffptr[-2] = buffptr[0];
        buffptr[-1] = buffptr[0];
        buffptr[OrgWidth + 0] = buffptr[OrgWidth - 1];
        buffptr[OrgWidth + 1] = buffptr[OrgWidth - 1];
	}
	return nullptr;
}

// グレースケール化
int ImageGray(int index, int Page, int Half, int Count, int OrgWidth, int OrgHeight, int coloring)
{
//	LOGD("ImageGray : p=%d, h=%d, c=%d, ow=%d, oh=%d", Page, Half, Count, OrgWidth, OrgHeight);
	int ret = 0;

	int linesize;

	Coloring = coloring;

	// ラインサイズ
	linesize  = OrgWidth + HOKAN_DOTS;

	//  サイズ変更画像待避用領域確保
	if (ScaleMemAlloc(index, linesize, OrgHeight) < 0) {
		return -6;
	}

	// データの格納先ポインタリストを更新
	if (RefreshSclLinesPtr(index, Page, Half, Count, OrgHeight, linesize) < 0) {
		return -7;
	}

	pthread_t thread[gMaxThreadNum];
	int start = 0;
	int param[gMaxThreadNum][5];
	void *status[gMaxThreadNum];

	for (int i = 0 ; i < gMaxThreadNum ; i ++) {
		param[i][0] = start;
		param[i][1] = start = OrgHeight * (i + 1)  / gMaxThreadNum;
		param[i][2] = OrgWidth;
		param[i][3] = OrgHeight;
        param[i][4] = index;

		if (i < gMaxThreadNum - 1) {
			/* スレッド起動 */
			if (pthread_create(&thread[i], nullptr, ImageGray_ThreadFunc, (void*)param[i]) != 0) {
				LOGE("pthread_create()");
			}
		}
		else {
			// ループの最後は直接実行
			status[i] = ImageGray_ThreadFunc((void*)param[i]);
		}
	}

	for (int i = 0 ; i < gMaxThreadNum ; i ++) {
		/*thread_func()スレッドが終了するのを待機する。thread_func()スレッドが終了していたら、この関数はすぐに戻る*/
		if (i < gMaxThreadNum - 1) {
			pthread_join(thread[i], &status[i]);
		}
		if (status[i] != nullptr) {
//			LOGD("CreateScaleCubic : cancel");
			ret = (long)status[i];
		}
	}
//	LOGD("ImageGray : complete");
	return ret;
}